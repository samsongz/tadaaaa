{"version":3,"sources":["sounds/fireworks.mp3","sounds/horn.mp3","sounds/pop.mp3","sounds/ticktock.mp3","sounds/crowd.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","Party","isParty","useSound","horn","volume","playHorn","crowd","playCrowd","fireworks","playFireworks","useEffect","App","useState","seconds","setSeconds","ready","setReady","ticktock","playTick","pop","playPop","intervalRef","useRef","startCountdown","useCallback","confetti","particleCount","spread","startVelocity","origin","y","current","setInterval","clearInterval","timesUp","animationEnd","Date","now","defaults","ticks","zIndex","randomInRange","min","max","Math","random","interval","timeLeft","Object","assign","x","celebrate","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,wQCQ3C,SAASC,EAAT,GAA6B,IAAZC,EAAW,EAAXA,QAAW,EACPC,YAASC,IAAM,CAAEC,OAAQ,MAArCC,EADmB,sBAENH,YAASI,IAAO,CAAEF,OAAQ,MAAvCG,EAFmB,sBAGFL,YAASM,IAAW,CAAEJ,OAAQ,MAA/CK,EAHmB,oBAa1B,OARAC,qBAAU,WACJT,IACFM,IACAF,IACAI,OAED,CAACR,EAASM,EAAWE,EAAeJ,IAE/BJ,GAAW,6BAAK,oCAAa,2CAuExBU,MArEf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAEaF,oBAAS,GAFtB,mBAENG,EAFM,KAECC,EAFD,OAGMd,YAASe,IAAU,CAAEb,OAAQ,MAAzCc,EAHM,sBAIKhB,YAASiB,IAAK,CAAEf,OAAQ,MAAnCgB,EAJM,oBA8BPC,EAAcC,mBAEdC,EAAiBC,uBAAY,WAcjC,OAbAJ,IACAK,YAAS,CACPC,cAAe,GACfC,OAAQ,GACRC,cAAe,GACfC,OAAQ,CAAEC,EAAG,MAGfT,EAAYU,QAAUC,aAAY,WAChClB,GAAW,SAAAD,GAAO,OAAIA,EAAU,KAChCK,MACC,KAEI,kBAAMe,cAAcZ,EAAYU,YACtC,CAACX,EAASF,IAEPgB,EAAsB,IAAZrB,EAEZqB,IACFD,cAAcZ,EAAYU,SA9C5B,WACE,IACII,EAAeC,KAAKC,MADT,KAEXC,EAAW,CAAEV,cAAe,GAAID,OAAQ,IAAKY,MAAO,GAAIC,OAAQ,GAEpE,SAASC,EAAcC,EAAKC,GAC1B,OAAOC,KAAKC,UAAYF,EAAMD,GAAOA,EAGvC,IAAII,EAAWd,aAAY,WACzB,IAAIe,EAAWZ,EAAeC,KAAKC,MAEnC,GAAIU,GAAY,EACd,OAAOd,cAAca,GAGvB,IAAIpB,EAAsBqB,EAfb,KAeO,GAEpBtB,YAASuB,OAAOC,OAAO,GAAIX,EAAU,CAAEZ,gBAAeG,OAAQ,CAAEqB,EAAGT,EAAc,GAAK,IAAMX,EAAGc,KAAKC,SAAW,OAC/GpB,YAASuB,OAAOC,OAAO,GAAIX,EAAU,CAAEZ,gBAAeG,OAAQ,CAAEqB,EAAGT,EAAc,GAAK,IAAMX,EAAGc,KAAKC,SAAW,SAC9G,KA2BHM,IAGF,IAAMlD,EAAUiC,GAAWnB,EAE3B,OACE,yBAAKqC,UAAU,OACb,yBAAKA,UAAU,SACXnD,GAAW,wBAAImD,UAAWrC,IAAUmB,EAAU,WAAa,IAAMnB,EAAQF,EAAU,UACrF,kBAACb,EAAD,CAAOC,QAASA,KACbc,GAAS,4BAAQqC,UAAU,YAAYC,QAAS,WAAS9B,KAAoBP,GAAS,KAA7E,aC1EAsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAclD,MACrBmD,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.45a5b6e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fireworks.a396a739.mp3\";","module.exports = __webpack_public_path__ + \"static/media/horn.20e15e0f.mp3\";","module.exports = __webpack_public_path__ + \"static/media/pop.73ecaaf0.mp3\";","module.exports = __webpack_public_path__ + \"static/media/ticktock.b685cef5.mp3\";","module.exports = __webpack_public_path__ + \"static/media/crowd.03113ce8.mp3\";","import React, { useState, useRef, useCallback,  } from 'react';\nimport './App.css';\nimport confetti from 'canvas-confetti';\nimport useSound from 'use-sound';\nimport { crowd, fireworks, pop, horn, ticktock } from './sounds';\n\nimport { useEffect } from 'react';\n\nfunction Party({ isParty }) {\n  const [playHorn] = useSound(horn, { volume: 0.05 });\n  const [playCrowd] = useSound(crowd, { volume: 0.25 });\n  const [playFireworks] = useSound(fireworks, { volume: 0.25 });\n\n  useEffect(() => {\n    if (isParty) {\n      playCrowd();\n      playHorn();\n      playFireworks();\n    }\n  }, [isParty, playCrowd, playFireworks, playHorn]);\n\n  return (isParty && <div><h1>yay!</h1><h1>we did it!</h1></div>);\n}\nfunction App() {\n  const [seconds, setSeconds] = useState(10);\n  const [ready, setReady] = useState(false);\n  const [playTick] = useSound(ticktock, { volume: 0.25 });\n  const [playPop] = useSound(pop, { volume: 0.25});\n\n  function celebrate() {\n    var duration = 15 * 1000;\n    var animationEnd = Date.now() + duration;\n    var defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };\n\n    function randomInRange(min, max) {\n      return Math.random() * (max - min) + min;\n    }\n\n    var interval = setInterval(function() {\n      var timeLeft = animationEnd - Date.now();\n\n      if (timeLeft <= 0) {\n        return clearInterval(interval);\n      }\n\n      var particleCount = 50 * (timeLeft / duration);\n      // since particles fall down, start a bit higher than random\n      confetti(Object.assign({}, defaults, { particleCount, origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 } }));\n      confetti(Object.assign({}, defaults, { particleCount, origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 } }));\n    }, 250);\n\n  }\n\n  const intervalRef = useRef();\n\n  const startCountdown = useCallback(() => {\n    playPop()\n    confetti({\n      particleCount: 50,\n      spread: 30,\n      startVelocity: 20,\n      origin: { y: 0.6 }\n    });\n\n    intervalRef.current = setInterval(() => {\n      setSeconds(seconds => seconds - 1);\n      playTick();\n    }, 1000);\n\n    return () => clearInterval(intervalRef.current);\n  }, [playPop, playTick]);\n\n  const timesUp = seconds === 0;\n\n  if (timesUp) {\n    clearInterval(intervalRef.current);\n    celebrate()\n  }\n\n  const isParty = timesUp && ready;\n\n  return (\n    <div className=\"app\">\n      <div className=\"item\">\n        {!isParty && <h1 className={ready && !timesUp ? 'counting' : ''}>{ ready ? seconds : 'Ready?' }</h1>}\n        <Party isParty={isParty} />\n        { !ready && <button className='go-button' onClick={() => {  startCountdown() && setReady(true)}}>Start!</button>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}